name: CI Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: CI Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: berthcare_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      # Note: These credentials are safe to hardcode as they only apply to ephemeral
      # GitHub Actions containers that are destroyed after each run. They cannot be
      # used to access any production or persistent infrastructure.
      TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/berthcare_test
      TEST_REDIS_URL: redis://localhost:6379
      # Twilio test credentials loaded from GitHub Secrets
      # To set these up, add these keys to your repository secrets:
      # Settings > Secrets and variables > Actions > New repository secret
      TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
      TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
      TWILIO_PHONE_NUMBER: ${{ secrets.TWILIO_PHONE_NUMBER }}
      TWILIO_WEBHOOK_BASE_URL: ${{ secrets.TWILIO_WEBHOOK_BASE_URL }}
      # JWT test keys loaded from GitHub Secrets
      # To set these up, add JWT_PUBLIC_KEY and JWT_PRIVATE_KEY to your repository secrets
      # Settings > Secrets and variables > Actions > New repository secret
      JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Prettier check
        run: npm run format:check
        continue-on-error: false

      - name: Run TypeScript type check
        run: npm run type-check
        continue-on-error: false

      - name: Build shared library
        run: npx nx run shared:build

      - name: Setup test database
        run: |
          cd apps/backend
          npm run migrate:up
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL }}

      - name: Run tests with coverage
        run: npm run test:ci -- --maxWorkers=2
        continue-on-error: false

      - name: Run dependency audit
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: Build all packages
        run: npm run build
        continue-on-error: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: CI Summary
        if: success()
        run: |
          echo "✅ All CI checks completed successfully"
          echo "Lint, format, type-check, tests, audit, and build all passed"

      - name: CI Failed
        if: failure()
        run: |
          echo "❌ CI checks failed"
          exit 1
